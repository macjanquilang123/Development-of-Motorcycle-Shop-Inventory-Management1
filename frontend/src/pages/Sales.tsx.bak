import React, { useEffect, useRef, useState } from "react";
import { Grid, html } from "gridjs";
import "gridjs/dist/theme/mermaid.css";
import "bootstrap/dist/css/bootstrap.min.css";
import "../App.css";
import Breadcrumb from "../components/breadcrums";
import Header from "../layouts/header";
import Sidemenu from "../layouts/sidemenu";
import { fetchSales, addSale, deleteSale, fetchProducts } from "../../api/api";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

interface Sale {
  sale_id: number;
  product_id: number;
  product_name: string;
  quantity: number;
  price: number;
  total_price: number;
  payment_type: string;
  sale_date: string;
}

interface Product {
  product_id: number;
  name: string;
  price: number;
  quantity: number;
}

const Sales: React.FC = () => {
  const [sales, setSales] = useState<Sale[]>([]);
  const [products, setProducts] = useState<Product[]>([]);
  const [selectedProducts, setSelectedProducts] = useState<
    { product_id: number; quantity: number }[]
  >([]);
  const [paymentType, setPaymentType] = useState<string>("cash");
  const [addModalVisible, setAddModalVisible] = useState(false);
  const [deleteModalVisible, setDeleteModalVisible] = useState(false);
  const [saleToDelete, setSaleToDelete] = useState<number | null>(null);
  const gridInstance = useRef<any>(null);
  const gridRef = useRef<HTMLDivElement>(null);
  const [filteredProducts, setFilteredProducts] = useState<Product[]>([]);

  const loadSales = async () => {
    try {
      const [salesData, productsData] = await Promise.all([fetchSales(), fetchProducts()]);
      setSales(salesData);
      setProducts(productsData);
      setFilteredProducts(productsData); // Initialize filtered products
      renderGrid(salesData);
    } catch (error) {
      console.error("Error loading sales:", error);
    }
  };

  const exportSalesReport = () => {
    if (sales.length === 0) {
      alert("No sales data to export.");
      return;
    }

    const doc = new jsPDF();
    doc.text("Sales Report", 14, 10);

    autoTable(doc, {
        head: [["Sale ID", "Product", "Quantity", "Price", "Total Price", "Payment Type", "Sale Date"]],
        body: sales.map((sale) => [
          sale.sale_id,
          sale.product_name,
          sale.quantity,
          `₱${parseFloat(sale.price?.toString() || "0").toFixed(2)}`, // Ensure price is valid
          `₱${parseFloat(sale.total_price?.toString() || "0").toFixed(2)}`, // Ensure total_price is valid
          sale.payment_type,
          new Date(sale.sale_date).toLocaleString(),
        ]),
        theme: "grid",
        styles: {
          fontSize: 10,
        },
      });

    doc.save("sales_report.pdf");
  };

  const renderGrid = (data: Sale[]) => {
    if (gridRef.current) {
      if (gridInstance.current) {
        gridInstance.current.destroy();
      }

      gridInstance.current = new Grid({
        columns: [
          { name: "Sale ID", width: "auto" },
          { name: "Product", width: "auto" },
          { name: "Quantity", width: "auto" },
          { name: "Price", width: "auto" },
          { name: "Total Price", width: "auto" },
          { name: "Payment Type", width: "auto" },
          { name: "Sale Date", width: "auto" },
          {
            name: "Actions",
            width: "auto",
            formatter: (_: any, row: { cells: { data: any }[] }) => {
              const id = row.cells[0].data;
              return html(`
                <div class="btn-group d-flex justify-content-center">
                  <button class="btn btn-sm btn-outline-danger action-btn" data-id="${id}" data-action="delete">
                    Delete
                  </button>
                </div>
              `);
            },
          },
        ],
        search: true,
        sort: true,
        pagination: { limit: 10 },
        data: data.map((sale) => [
          sale.sale_id,
          sale.product_name,
          sale.quantity,
          `₱${parseFloat(sale.price?.toString() || "0").toFixed(2)}`,
          `₱${parseFloat(sale.total_price?.toString() || "0").toFixed(2)}`,
          sale.payment_type,
          new Date(sale.sale_date).toLocaleString(),
        ]),
        className: {
          table: "table table-striped table-hover",
          thead: "table-dark",
          tbody: "table-light",
        },
      }).render(gridRef.current);
    }
  };

  const handleProductSelection = (
    e: React.ChangeEvent<HTMLInputElement>,
    productId: number
  ) => {
    if (e.target.checked) {
      setSelectedProducts((prev) => [...prev, { product_id: productId, quantity: 0 }]);
    } else {
      setSelectedProducts((prev) =>
        prev.filter((product) => product.product_id !== productId)
      );
    }
  };

  const handleQuantityChange = (productId: number, quantity: number) => {
    setSelectedProducts((prev) =>
      prev.map((product) =>
        product.product_id === productId ? { ...product, quantity } : product
      )
    );
  };

  const handleAddSale = async () => {
    if (selectedProducts.length === 0) {
      alert("Please select at least one product.");
      return;
    }
  
    for (const selectedProduct of selectedProducts) {
      const product = products.find((p) => p.product_id === selectedProduct.product_id);
      if (!product || selectedProduct.quantity <= 0 || selectedProduct.quantity > product.quantity) {
        alert("Invalid quantity for one or more products.");
        return;
      }
    }
  
    try {
      for (const selectedProduct of selectedProducts) {
        const product = products.find((p) => p.product_id === selectedProduct.product_id);
        if (product) {
          const price = parseFloat(product.price?.toString() || "0"); // Ensure price is a valid number
          await addSale({
            product_id: selectedProduct.product_id,
            quantity: selectedProduct.quantity,
            price: price,
            total_price: price * selectedProduct.quantity,
            payment_type: paymentType,
          });
        }
      }
      setAddModalVisible(false);
      resetForm();
      await loadSales(); // Refresh sales data
    } catch (error) {
      console.error("Error adding sale:", error);
    }
  };

  const handleDeleteSale = async () => {
    if (!saleToDelete) return;

    try {
      await deleteSale(saleToDelete);
      setDeleteModalVisible(false);
      setSaleToDelete(null);
      await loadSales(); // Refresh the data
    } catch (error) {
      console.error("Error deleting sale:", error);
    }
  };

  const resetForm = () => {
    setSelectedProducts([]);
    setPaymentType("cash");
  };

  const confirmDelete = (id: number) => {
    setSaleToDelete(id);
    setDeleteModalVisible(true);
  };

  useEffect(() => {
    (window as any).confirmDelete = confirmDelete;
    loadSales();
  }, []);

  return (
    <>
      <Header />
      <Sidemenu />
      <div className="main-content app-content">
        <div className="container-fluid">
        <Breadcrumb
            title="Manage Sales"
            links={[{ text: "Dashboard", link: "/dashboard" }]}
            active="Sales"
            buttons={
              <div className="d-flex gap-2">
                <button
                  className="btn btn-primary"
                  onClick={() => setAddModalVisible(true)}
                  title="Add a new sale"
                >
                  + Add Sale
                </button>
                <button
                  className="btn btn-success"
                  onClick={exportSalesReport}
                  title="Export all sales to PDF"
                >
                  Export Report
                </button>
              </div>
            }
          />
          <div className="box">
            <div className="box-body p-4">
              {/* Add Modal */}
              {addModalVisible && (
                <div className={`modal-overlay ${addModalVisible ? "show" : ""}`}>
                  <div className="modal-content">
                    <h5 className="mb-4">Add New Sale</h5>

                    <input
                      type="text"
                      className="form-control mb-3"
                      placeholder="Search product..."
                      onChange={(e) => {
                        const value = e.target.value.toLowerCase();
                        const filtered = products.filter((p) => p.name.toLowerCase().includes(value));
                        setFilteredProducts(filtered); // Update filtered products
                      }}
                    />

                    {filteredProducts.length === 0 ? (
                      <p>No products available.</p>
                    ) : (
                      <div className="list-group mb-3">
                        {filteredProducts.map((product) => {
                          const isSelected = selectedProducts.some((p) => p.product_id === product.product_id);
                          return (
                            <div key={product.product_id} className="list-group-item">
                              <div className="d-flex justify-content-between align-items-center">
                                <div>
                                  <input
                                    type="checkbox"
                                    className="form-check-input me-2"
                                    onChange={(e) => handleProductSelection(e, product.product_id)}
                                    checked={isSelected}
                                  />
                                  <label className="form-check-label">
                                    {product.name} – ₱{parseFloat(product.price?.toString() || "0").toFixed(2)}
                                  </label>
                                </div>
                                {isSelected && (
                                  <input
                                    type="number"
                                    className="form-control w-25"
                                    min="1"
                                    max={product.quantity}
                                    placeholder="Qty"
                                    onChange={(e) =>
                                      handleQuantityChange(product.product_id, Number(e.target.value))
                                    }
                                  />
                                )}
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    )}

                  <label htmlFor="paymentType" className="form-label">Payment Type</label>
                  <select
                    id="paymentType"
                    className="form-select mb-3"
                    value={paymentType}
                    onChange={(e) => setPaymentType(e.target.value)}
                  >
                    <option value="cash">Cash</option>
                    <option value="gcash">GCash</option>
                    <option value="maya">Maya</option>
                  </select>

                  <div className="d-flex justify-content-end">
                    <button
                      className="btn btn-outline-secondary me-2"
                      onClick={() => setAddModalVisible(false)}
                    >
                      Cancel
                    </button>
                    <button className="btn btn-primary" onClick={handleAddSale}>
                      Add Sale
                    </button>
                  </div>
                </div>

                </div>
              )}

              {/* Delete Modal */}
              {deleteModalVisible && (
                <div className="modal-overlay">
                  <div className="modal-content text-center">
                    <h5>Confirm Deletion</h5>
                    <p>Are you sure you want to delete this sale?</p>
                    <div className="d-flex justify-content-center mt-4">
                      <button
                        className="btn btn-outline-secondary me-3"
                        onClick={() => setDeleteModalVisible(false)}
                      >
                        Cancel
                      </button>
                      <button className="btn btn-danger" onClick={handleDeleteSale}>
                        Delete
                      </button>
                    </div>
                  </div>
                </div>
              )}

              <div ref={gridRef}></div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default Sales;